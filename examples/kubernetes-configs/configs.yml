# you don't even need to mount the config as volumes : a declaration is enough, the controller will take care of the rest
# bunkerweb.io/CONFIG_TYPE accepted values are http, stream, server-http, server-stream, default-server-http, modsec and modsec-crs
# bunkerweb.io/CONFIG_SITE lets you choose on which web service the config should be applied (MULTISITE mode) and if it's not set, the config will be applied for all services
# more info at https://docs.bunkerweb.io
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfg-bunkerweb-all-server-http
  annotations:
    bunkerweb.io/CONFIG_TYPE: "server-http"
data:
  myconf: |
    location /hello {
        default_type "text/plain";
        content_by_lua_block {
            ngx.say("hello")
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfg-bunkerweb-app1-server-http
  annotations:
    bunkerweb.io/CONFIG_TYPE: "server-http"
    bunkerweb.io/CONFIG_SITE: "app1.example.com"
data:
  myconf: |
    location /app1 {
        default_type "text/plain";
        content_by_lua_block {
            ngx.say("app1")
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfg-bunkerweb-app2-server-http
  annotations:
    bunkerweb.io/CONFIG_TYPE: "server-http"
    bunkerweb.io/SERVER_NAME: "app2.example.com"
data:
  myconf: |
    location /app2 {
        default_type "text/plain";
        content_by_lua_block {
            ngx.say("app2")
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cfg-bunkerweb-app3-server-http
  annotations:
    bunkerweb.io/CONFIG_TYPE: "server-http"
    bunkerweb.io/SERVER_NAME: "app3.example.com"
data:
  myconf: |
    location /app3 {
        default_type "text/plain";
        content_by_lua_block {
            ngx.say("app3")
        }
    }